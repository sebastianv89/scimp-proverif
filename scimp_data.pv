(*

Formal analysis of the Silent Cirlce Instant Messaging Protocol (SCIMP).

Author:        Sebastian Verschoor
Email:         s.r.verschoor@student.tue.nl
Last modified: <2015-10-09 12:41:59>

Alice sends a message to Bob, then both update the key material, which
then gets compromised. The goal is to show that the adversary cannot
decrypt the messages from the past.

The description for the protocol was taken from the protocol description at:
https://github.com/SilentCircle/silent-text/tree/master/Documentation
A more informal description is given at:
https://silentcircle.com/scimp-protocol

Proverif version used: 1.90 (retrieved at 2015-07-06)

*** Short protocol description ***

Sender Alice (A)
Receiver Bob (B)

Alice and Bob share a key k0 and index i0 for sending messages from
Alice to Bob.

A      : (key, nonce) = split(k0)
       : i_pub = i0 & 0xFFFF
A  -> B: (i_pub, aead_enc(key, nonce, i0, msg))
      B: verify-decrypt
A  &  B: k1 = KDF(k0, "messageKey", SESSID, isnd)
         i1 += 1      

*)


(*** Types ***)

type mac_key.
type secret_key.
type nonce.
type point.
type scalar.
type identity.

fun mk2bs(mac_key)    : bitstring       [data, typeConverter].
fun bs2mk(bitstring)  : mac_key         [data, typeConverter].
fun sk2bs(secret_key) : bitstring       [data, typeConverter].
fun bs2sk(bitstring)  : secret_key      [data, typeConverter].
fun pt2bs(point)      : bitstring       [data, typeConverter].
fun bs2n (bitstring)  : nonce           [data, typeConverter].
fun sk2mk(secret_key) : mac_key         [data, typeConverter].
fun mk2sk(mac_key)    : secret_key      [data, typeConverter].


(*** Functions ***)

fun increment(bitstring) : bitstring [data].

fun splitFst(bitstring) : bitstring.
fun splitSnd(bitstring) : bitstring.
reduc forall x:bitstring;
      unsplit(splitFst(x), splitSnd(x)) = x.

(* Cryptographic functions *)

fun hash(bitstring) : bitstring.

(* Message authentication code (MAC) *)
fun mac(mac_key, bitstring) : bitstring.

(* Key derivation function (KDF) *)
reduc forall key:mac_key, context:bitstring, label:bitstring;
      kdf(key, label, context) = mac(key, (label, context)).

(* Symmetric encryption/decryption *)
fun sym_enc(secret_key, nonce, bitstring) : bitstring.
fun sym_dec(secret_key, nonce, bitstring) : bitstring.
equation forall k:secret_key, n:nonce, m:bitstring;
         sym_dec(k, n, sym_enc(k, n, m)) = m.
equation forall k:secret_key, n:nonce, m:bitstring;
         sym_enc(k, n, sym_dec(k, n, m)) = m.

(* Authenticated Encryption with Additional Data *)
letfun aead_enc(k:secret_key, n:nonce, header:bitstring, plaintext:bitstring) =
       let tag = mac(sk2mk(k), (n, header, plaintext)) in
       sym_enc(k, n, (plaintext, tag)).
letfun aead_dec(k:secret_key, n:nonce, header:bitstring, ciphertext:bitstring) =
       let (plaintext:bitstring, tag:bitstring) = sym_dec(k, n, ciphertext) in
       let (=tag) = mac(sk2mk(k), (n, header, plaintext)) in
       plaintext.

(*** Communication channels ***)

free ch:channel.

(*** Constants ***)

const Null            : bitstring [data]. (* NULL *)
const msgKeyLabel     : bitstring [data]. (* "MessageKey" *)


(*** Queries ***)

(* Key material (established at key negotiation) *)
free key0 : bitstring [private].
free index0 : bitstring. (* Assumed public *)
free sessionId : bitstring. (* Can be derived from public values *)
query attacker(key0).

(* Future key material *)
free k1SndFlag, k1RcvFlag : bitstring [private].
query attacker(k1SndFlag) phase 0;
      attacker(k1RcvFlag) phase 0.

(* Secrecy of the message *)
free msg : bitstring [private].
noninterf msg.

(* Queries for authenticity *)
event sendMessage(bitstring, bitstring, bitstring, bitstring, bitstring).
event receiveMessage(bitstring, bitstring, bitstring, bitstring, bitstring).
query k0:bitstring, i0:bitstring, k1:bitstring, i1:bitstring, m:bitstring;
      event(receiveMessage(k0, i0, k1, i1, m))
        ==> event(sendMessage(k0, i0, k1, i1, m)).

(* Query reachability: check for typos. This should result in
   not attacker(...HasTypo[]) is false. *)
free sndHasTypo, rcvHasTypo : bitstring [private].
query attacker(sndHasTypo); attacker(rcvHasTypo).


(*** Processes ***)

(* Role of the sender *)
let processSender(ksnd:bitstring, isnd:bitstring) =
  (* Compute ciphertext *)
  let key = bs2sk(splitFst(ksnd)) in
  let nonce = bs2n(splitSnd(ksnd)) in
  let ct = aead_enc(key, nonce, isnd, msg) in
  (* Update key *)
  let ksnd1 = kdf(bs2mk(ksnd), msgKeyLabel, (sessionId, isnd)) in
  let isnd1 = increment(isnd) in
  out(ch, sym_enc(bs2sk(ksnd1), bs2n(Null), k1SndFlag));
  (* Send message *)
  event sendMessage(ksnd, isnd, ksnd1, isnd1, msg);
  let isnd_pub = splitSnd(isnd) in
  out(ch, (isnd_pub, ct));
  (* Leak index, because it is assumed public *)
  out(ch, isnd1);

  (* Compromise key *)
  phase 1;
  out(ch, ksnd1)

  (* Check for typos *)
  ; out(ch, sndHasTypo)

  .

(* Role of the receiver *)
let processReceiver(krcv:bitstring, ircv:bitstring) =
  (* Receive message *)
  let ircv_pub = splitSnd(ircv) in
  in(ch, (=ircv_pub, ct:bitstring));
  (* Compute plaintext *)
  let key = bs2sk(splitFst(krcv)) in
  let nonce = bs2n(splitSnd(krcv)) in
  let pt = aead_dec(key, nonce, ircv, ct) in
  (* Update key *)
  let krcv1 = kdf(bs2mk(krcv), msgKeyLabel, (sessionId, ircv)) in
  let ircv1 = increment(ircv) in
  out(ch, sym_enc(bs2sk(krcv1), bs2n(Null), k1RcvFlag));
  (* Leak index, because it is assumed public *)
  out(ch, ircv1);
  
  event receiveMessage(krcv, ircv, krcv1, ircv1, pt);
  
  (* Compromise key *)
  phase 1;
  out(ch, krcv1)

  (* Check for typos *)
  ; out(ch, rcvHasTypo)

  .

(*** Main ***)

process
  processSender(key0, index0) |
  processReceiver(key0, index0)

